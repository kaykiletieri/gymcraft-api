// <auto-generated />
using System;
using GymCraftAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GymCraftAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240624144201_AddDefaultExerciseCategories")]
    partial class AddDefaultExerciseCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<Guid>("CategoryUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("category_uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Uuid");

                    b.HasIndex("CategoryUuid");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.ExerciseCategory", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Uuid");

                    b.ToTable("exercise_categories", (string)null);

                    b.HasData(
                        new
                        {
                            Uuid = new Guid("8e7a7403-faab-47a9-9d9d-491d0f7b65e2"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1453),
                            Description = "Exercícios de peito",
                            Name = "Peito",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1454)
                        },
                        new
                        {
                            Uuid = new Guid("0fe4d849-f885-478a-a771-85a872ebfa74"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1456),
                            Description = "Exercícios de costas",
                            Name = "Costas",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1457)
                        },
                        new
                        {
                            Uuid = new Guid("6d700f3e-3fb8-41a6-98cb-3753f10e9b95"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1458),
                            Description = "Exercícios de pernas",
                            Name = "Pernas",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1458)
                        },
                        new
                        {
                            Uuid = new Guid("68830480-1382-4fd3-a4d9-495345e52178"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1460),
                            Description = "Exercícios de tríceps",
                            Name = "Tríceps",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1460)
                        },
                        new
                        {
                            Uuid = new Guid("89b6489b-b657-4b19-89b0-60820d80592f"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1462),
                            Description = "Exercícios de bíceps",
                            Name = "Bíceps",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1462)
                        },
                        new
                        {
                            Uuid = new Guid("faeced17-7cc8-4a55-9dea-110e76e55018"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1465),
                            Description = "Exercícios de deltóide",
                            Name = "Deltóide",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1465)
                        },
                        new
                        {
                            Uuid = new Guid("0be52e17-4c21-4fb7-9f7e-18858973b926"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1467),
                            Description = "Exercícios de trapézio",
                            Name = "Trapézio",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1467)
                        },
                        new
                        {
                            Uuid = new Guid("88d501f6-b50b-4a52-a7d7-d950ef85debd"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1468),
                            Description = "Exercícios de abdômen",
                            Name = "Abdômen",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1468)
                        },
                        new
                        {
                            Uuid = new Guid("940ceada-a91f-4328-a1e4-3ae47e9ee7a3"),
                            CreatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1470),
                            Description = "Exercícios aeróbicos",
                            Name = "Aeróbicos",
                            UpdatedAt = new DateTime(2024, 6, 24, 14, 42, 1, 558, DateTimeKind.Utc).AddTicks(1470)
                        });
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Uuid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Workout", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("UserUuid");

                    b.ToTable("workouts", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutDay", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<Guid>("WorkoutUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("WorkoutUuid");

                    b.ToTable("workout_days", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ExerciseUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Repetitions")
                        .HasColumnType("integer")
                        .HasColumnName("repetitions");

                    b.Property<int?>("RestTime")
                        .HasColumnType("integer")
                        .HasColumnName("rest_time");

                    b.Property<int>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("sets");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WorkoutDayUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_day_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("ExerciseUuid");

                    b.HasIndex("WorkoutDayUuid");

                    b.ToTable("workout_exercises", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.ExerciseCategory", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Workout", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutDay", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.Workout", "Workout")
                        .WithMany("WorkoutDays")
                        .HasForeignKey("WorkoutUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutExercise", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymCraftAPI.Domain.Entities.WorkoutDay", "WorkoutDay")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutDayUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.ExerciseCategory", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Workout", b =>
                {
                    b.Navigation("WorkoutDays");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutDay", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
