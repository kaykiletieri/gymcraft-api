// <auto-generated />
using System;
using GymCraftAPI.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GymCraftAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240617124930_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Exercise", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<Guid>("CategoryUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("category_uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Uuid");

                    b.HasIndex("CategoryUuid");

                    b.ToTable("exercises", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.ExerciseCategory", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Uuid");

                    b.ToTable("exercise_categories", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Uuid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Workout", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("user_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("UserUuid");

                    b.ToTable("workouts", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutDay", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("WeekDay")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<Guid>("WorkoutUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("WorkoutUuid");

                    b.ToTable("workout_days", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutExercise", b =>
                {
                    b.Property<Guid>("Uuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("ExerciseUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("exercise_uuid");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<int>("Repetitions")
                        .HasColumnType("integer")
                        .HasColumnName("repetitions");

                    b.Property<int?>("RestTime")
                        .HasColumnType("integer")
                        .HasColumnName("rest_time");

                    b.Property<int>("Sets")
                        .HasColumnType("integer")
                        .HasColumnName("sets");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("WorkoutDayUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("workout_day_uuid");

                    b.HasKey("Uuid");

                    b.HasIndex("ExerciseUuid");

                    b.HasIndex("WorkoutDayUuid");

                    b.ToTable("workout_exercises", (string)null);
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.ExerciseCategory", "Category")
                        .WithMany("Exercises")
                        .HasForeignKey("CategoryUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Workout", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutDay", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.Workout", "Workout")
                        .WithMany("WorkoutDays")
                        .HasForeignKey("WorkoutUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutExercise", b =>
                {
                    b.HasOne("GymCraftAPI.Domain.Entities.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GymCraftAPI.Domain.Entities.WorkoutDay", "WorkoutDay")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutDayUuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("WorkoutDay");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.ExerciseCategory", b =>
                {
                    b.Navigation("Exercises");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.Workout", b =>
                {
                    b.Navigation("WorkoutDays");
                });

            modelBuilder.Entity("GymCraftAPI.Domain.Entities.WorkoutDay", b =>
                {
                    b.Navigation("WorkoutExercises");
                });
#pragma warning restore 612, 618
        }
    }
}
